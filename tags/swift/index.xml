<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on Tips</title>
    <link>https://jiadingyi.github.io/tags/swift/</link>
    <description>Recent content in swift on Tips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jiadingyi.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift中的属性</title>
      <link>https://jiadingyi.github.io/post/swift%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/post/swift%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</guid>
      <description>Swift 中的属性  实例属性  存储属性 计算属性 Example 枚举 rawValue 原理 延迟存储属性（Lazy Stored Property） 属性观察器（Property Observe） 全局变量，局部变量 inout 的再次研究   类型属性 （Type Property）  类型属性细节 单例模式      Swift 中的属性 实例属性 存储属性  类似成员变量的概念 存储在实例的内存中 结构体、类可以定义存储属性 ✅ 枚举不可以定义存储属性 ❎ 在创建类或结构体实例的时候，必须为所有实例属性设置一个合适的初始值  可以在初始化器里为存储属性设置一个初始值 可以分配一个默认的属性值作为属性定义的一部分    计算属性  本质就是方法（函数） 不占用实例的内存 枚举、结构体、类都可以定义计算属性 set 传入的新值默认叫做 newValue，也可以自定义   struct Circle { var radius: Double var diameter: Double { set (newDiameter) { radius = newDiameter / 2 } get { radius * 2 } } }    定义计算属性只能用 var，不能用 let  let 代表常量，值是一成不变的 计算属性的值是可能发生变化的（即使是只读计算属性）  上述例子中的 radius 改变会导致 diameter 变化     只读计算属性：只有 get，没有 set   struct Circle { var radius: Double var diameter: Double { radius * 2 } }     Example struct Circle { // 存储属性 var radius: Double // 计算属性 var diameter: Double { set { radius = newValue / 2 } get { radius * 2 } } } var circle = Circle(radius: 5) print(circle.</description>
    </item>
    
  </channel>
</rss>
